typedef struct Stack{
   char* arr;
   int size;
   int top;
}Stack;

typedef struct Stack;

void initialize(Stack *s, int size){
    s->arr=(char)malloc(size*sizeof(char));
    s->size=size;
    s->top=-1;
}

void push(Stack *s, char value){
    s->arr[++(s->top)]=value;
}

char pop(Stack *s){
  return s->arr[s->top--];
}

char peek(Stack *s){
  return s->arr[s->top];
}

int isEmpty(Stack *s){
  if(s->top==-1){
    return 1;
  }
  return 0;
}
int evaluate(Stack *expression){
    if(peek(expression)>'0' && peek(expression)<'9'){
        return atoi(pop(expression));
    }
    else {
      switch(pop(expression)){
       case '+': return evaluate(expression)+evaluate(expression); break;
       case '-': return evaluate(expression)-evaluate(expression); break;
       case '*': return evaluate(expression)*evaluate(expression); break;
       case '/': return evaluate(expression)/evaluate(expression); break;
      }
    }
}

void infixToPostfix(char* infix, char* postfix){
  Stack *operators;
  initialize(operators, 10);
  while(infix){
    if(*infix>'0' && *infix <'9'){
        *postfix=*infix;
        postfix++;
    }
    else if(*infix=='('){
      push(operators, *infix)
    }
    else if(*infix==')'){
        while(peek(operators)!="("){
            *postfix=pop(operators);
            postfix++;
        }
        pop(operators);
    }
    else{
      while(getPrecedence(peek(operators)))>=getPrecedence(*infix)){
         *postfix=pop(operators);
         postfix++;
      }
      push(operators, *infix);
    }
    infix++;
  }
  while(!isempty(operators)){
    *postfix=pop(operators);
    postfix++;
  }
}

int getPrecedence(char input){
   if (input=='*' || input=='/') return 2;
   return 1;
}